<?php
/**
 * User: yongli
 * Date: 17/12/8
 * Time: 13:54
 * Email: yong.li@szypwl.com
 * Copyright: 深圳优品未来科技有限公司
 */
namespace App\Controllers\WifiAdmin;

use App\Controllers\BaseAdmin;
use WifiAdmin\RoleModel;
use WifiAdmin\AdminModel;
use WifiAdmin\RoleUserModel;

/**
 * 后台系统信息管理(系统管理、网站管理)
 * Class System
 *
 * @package App\Controllers\WifiAdmin
 */
class System extends BaseAdmin
{
    /**
     * 构造函数
     */
    public function initialization()
    {
        parent::initialization(); // TODO: Change the autogenerated stub
        $this->doLoadID(100);
    }

    /**
     * 首页
     */
    public function index()
    {
        $this->doLoadID(200);
        $post = $this->request->getPost();
        if (!$post) {
            $this->display();
            die;
        }
        $this->_siteSave($post);
    }

    /**
     * 设置
     */
    public function setting()
    {
        $this->doLoadID(200);
        $post = $this->request->getPost();
        if (!$post) {
            $this->display();
            die;
        }
        $this->_siteSave($post);
    }

    /**
     * 保存网站配置
     *
     * @param $post
     */
    private function _siteSave($post)
    {
        unset($post['files'], $post['action'], $post[C('TOKEN_NAME')]);
        $status = $this->_updateConfig($post);
        $status ? call_back(0) : call_back(2, '', '操作失败!');
        //        $this->success('操作成功', U('System/' . $this->method));
    }

    /**
     * 更新网站配置信息
     *
     * @param        $new_config  用户配置项
     * @param string $config_file 配置文件
     *
     * @return bool
     */
    private function _updateConfig($new_config, $config_file = APP_PATH . 'Config/site.php')
    {
        // 判断文件是否可写
        if (!is_writable($config_file)) {
            return false;
        }
        $config = require $config_file;
        // 将系统配置项和用户配置合并
        $config = array_merge($config, $new_config);
        // 将配置项写入Conf/site.php文件中
        file_put_contents($config_file, "<?php \nreturn " . stripslashes(var_export($config, true)) . ";", LOCK_EX);
        // 删除编译文件、临时文件
        @unlink(CACHE_PATH . 'Twig');

        return true;

    }

    /**
     * 用户列表
     */
    public function userList()
    {
        // 获得role表中的id,name数据
        $role = RoleModel::select(['id', 'name'])->get()->toArray();
        // 查找不是站长的用户
        $build  = AdminModel::select('*')->whereIsAdmin(0);
        $num    = $build->count();
        $result = $build->skip(($this->page - 1) * $this->perPage)->take($this->perPage)->get()->toArray();
        // 获得分页配置
        $config = set_page_config($num, $this->url, 3, $this->perPage);
        // 实例化分页类
        $pagination = \Config\Services::pagination();
        // 初始化分页配置
        $pagination->initialize($config);
        $page = $pagination->create_links();
        // 分配用户数据
        $this->assign('lists', $result);
        // 分配页码
        $this->assign('page', $page);
        // 分配role数据
        $this->assign('role', $role);
        $this->display();
    }

    /**
     * 添加用户
     */
    public function addUser()
    {
        $post = $this->request->getPost();
        // 判断是否有post数据提交
        if ($post) {
            // 检测密码和确认密码是否都填写
            if (empty($post['password']) || empty($post['re_password'])) {
                call_back(2, '', '密码必须填写!');
            }
            // 检测这两个密码是否一致
            if ($post['password'] != $post['re_password']) {
                call_back(2, '', '两次输入密码不一致!');
            }
            // 设置添加时间、更新时间、最后登录时间
            $post['add_time']        = time();
            $post['create_time']     = time();
            $post['update_time']     = time();
            $post['last_login_time'] = time();
            $post['create_by']       = $this->uid;
            $post['update_by']       = $this->uid;
            // 开启事务
            $build = AdminModel::select();
            $build->getConnection()->beginTransaction();
            $user_id             = AdminModel::insertGetId($post);
            $data['user_id']     = $user_id;
            $data['role_id']     = $post['role'];
            $data['create_time'] = time();
            $data['update_time'] = time();
            $status              = RoleUserModel::insertGetId($data);
            if ($user_id && $status) {
                // 提交事务
                $build->getConnection()->commit();
                call_back(0);
            } else {
                // 回滚事务
                $build->getConnection()->rollBack();
                call_back(2, '', '操作失败!');
            }
        } else {
            // 获得角色表中的id、name数据
            $role = RoleModel::select('*')->whereStatus(1)->get()->toArray();
            // 分配角色名称数据
            $this->assign('role', $role);
            $this->display();
        }

    }

    /**
     * 编辑用户
     *
     * @param $id
     */
    public function editUser($id)
    {
        $post = $this->request->getPost();
        // 判断是否有POST数据提交
        if ($post) {
            // 检测是否都填写了密码和确认密码
            if (!empty($post['password']) || !empty($post['re_password'])) {
                call_back(2, '', '密码必须填写!');
            }
            // 检测两次输入的密码是否一致
            if ($post['password'] != $post['re_password']) {
                call_back(2, '', '两次输入密码不一致!');
            }
            // 对新密码进行md5加密
            $post['password'] = md5($post['password']);
            // 开启事务
            $build = AdminModel::select();
            $build->getConnection()->beginTransaction();
            $status  = AdminModel::whereId($id)->update($post);
            $status1 = RoleUserModel::whereUserId($post['id'])->update(['role_id' => $post['role']]);
            if ($status && $status1) {
                // 提交事务
                $build->getConnection()->commit();
                //                $this->assign('jumpUrl', U('userlist'));
                call_back(0);
            } else {
                // 回滚事务
                $build->getConnection()->rollBack();
                call_back(2, '', '操作失败!');
            }
        } else {
            // 获得要编辑用户的id, 查找条件
            $id = $this->request->getGet('id');
            // 获得要编辑的用户信息
            $info = AdminModel::select('id')->whereId($id)->get()->toArray();
            $info = $info ? $info[0] : [];
            // 检测当前编辑的用户是否存在
            !$info ? call_back(2, '', '没有此用户信息!') : '';
            // 获得角色的名称、idz
            $role = RoleModel::select(['id', 'name'])->get()->toArray();
            // 分配角色信息
            $this->assign('role', $role);
            // 分配当前编辑用户信息
            $this->assign('info', $info);
            $this->display();
        }
    }

    /**
     * 删除当用户
     *
     * @param $id
     */
    public function delUser($id)
    {
        $info = AdminModel::select('id')->whereId($id)->get()->toArray();
        $info = $info ? $info[0] : [];
        !$info ? call_back(2, '', '没有此用户信息!') : '';
        // 存在当前要删除的用户，就删除
        $status = AdminModel::whereId($id)->update(['is_delete' => 1]);
        $status ? call_back(0) : call_back(2, '', '操作失败!');
    }
}