<?php
/**
 * User: yongli
 * Date: 17/12/8
 * Time: 14:24
 * Email: yong.li@szypwl.com
 * Copyright: 深圳优品未来科技有限公司
 */
namespace App\Controllers\WifiAdmin;

use App\Controllers\BaseAdmin;
use WifiAdmin\AccessModel;
use WifiAdmin\AdminModel;
use WifiAdmin\RoleModel;
use WifiAdmin\TreeNodeModel;

class Role extends BaseAdmin
{
    public function initialization()
    {
        parent::initialization(); // TODO: Change the autogenerated stub
    }

    /**
     * 角色列表
     */
    public function role()
    {
        $build  = RoleModel::select('*');
        $num    = $build->count();
        $result = $build->skip(($this->page - 1) * $this->perPage)->take($this->perPage)->get()->toArray();
        // 获得分页配置
        $config = set_page_config($num, $this->url, 3, $this->perPage);
        // 实例化分页类
        $pagination = \Config\Services::pagination();
        // 初始化分页配置
        $pagination->initialize($config);
        $page = $pagination->create_links();
        $this->assign('lists', $result);
        // 分配页码
        $this->assign('page', $page);
        $this->display();
    }

    /**
     * 添加角色
     */
    public function addRole()
    {
        $post = $this->request->getPost();
        // 判断是否有POST数据提交
        if ($post) {
            $post['create_time'] = time();
            $post['update_time'] = time();
            $post['create_by']   = $this->uid;
            $post['update_by']   = $this->uid;
            $status              = RoleModel::insertGetId($post);
            $status ? call_back(0) : call_back(2, '', '操作失败!');
        } else {
            // 显示模板
            $this->display();
        }
    }

    /**
     * 编辑角色
     *
     * @param $id
     */
    public function editRole($id)
    {
        $post = $this->request->getPost();
        // 判断是否有POST数据提交
        if ($post) {
            $post['update_time'] = time();
            $status              = RoleModel::whereId($id)->update($post);
            $status ? call_back(0) : call_back(2, '', '操作失败!');
        } else {
            $info = RoleModel::select('*')->whereId($id)->get()->toArray();
            $info = $info ? $info[0] : [];
            !$info ? call_back(2, '', '没有此角色信息!') : '';
            // 向模板中分配当前编辑的用户信息
            $this->assign('info', $info);
            $this->display();
        }
    }

    /**
     * 删除角色
     *
     * @param $id
     */
    public function delRole($id)
    {
        $info = RoleModel::select('*')->whereId($id)->get()->toArray();
        $info = $info ? $info[0] : [];
        !$info ? call_back(2, '', '没有此角色信息!') : '';
        // 统计admin表中要删除当前角色的用户人数
        $count = AdminModel::whereRole($info['id'])->count();
        // 用户表中还存在当前角色的用户
        if ($count > 0) {
            call_back(2, '', '当前角色还有用户存在，不能删除!');
        }
        // 删除当前角色
        $status = RoleModel::whereId($id)->update(['is_delete' => 1]);
        $status ? call_back(0) : call_back(2, '', '操作失败!');
        // 跳转到角色列表
        //            $this->success("删除成功", U('system/role'));
    }

    /**
     * 角色权限管理
     */
    public function roleAccess()
    {
        $post = $this->request->getPost();
        // 判断是否有POST数据提交
        if ($post) {
            // 开启事务
            $build = AccessModel::select();
            $build->getConnection()->beginTransaction();
            // 删除当前角色的权限
            $status = AccessModel::whereRoleId($post['role_id'])->update(['is_delete' => 1]);
            // 获得当前角色允许操作的节点
            foreach ($post['node_id'] as $k => $v) {
                // 角色id
                $data[$k]['role_id'] = $post['role_id'];
                // 角色允许的操作的节点
                $data[$k]['node_id']     = $v;
                $data[$k]['create_time'] = time();
                $data[$k]['update_time'] = time();
                $data[$k]['create_by']   = $this->uid;
                $data[$k]['update_by']   = $this->uid;
            }
            // 向权限表中添加数据
            $status1 = AccessModel::insert($data);
            if ($status && $status1) {
                $build->getConnection()->commit();
                call_back(0);
            } else {
                // 回滚事务
                $build->getConnection()->rollBack();
                call_back(2, '', '操作失败!');
            }
            //            $this->success('操作成功', U('Role'));
        } else {
            $get = $this->request->getGet();
            // 获得当前要分配权限的角色信息
            $info = RoleModel::select('*')->whereId($get['id'])->get()->toArray();
            $info = $info ? $info[0] : [];
            // 不存在当前要分配权限的角色信息
            !$info ? call_back(2, '', '没有此角色信息') : '';
            // 分配当前的要分配权限的角色信息
            $this->assign('role', $info);
            $acc = AccessModel::select('node_id')->whereRoleId($get['id'])->get()->toArray();
            $acc = array_column($acc, 'node_id');
            $acc = $acc ? $acc : [];
            // 用于存放节点字符串
            $rs = '';
            foreach ($acc as $k => $v) {
                $rs .= '#' . $v['node_id'] . '#';
            }
            // 查找启用的节点
            $trees = TreeNodeModel::select('*')->whereStatus(1)->get()->toArray();
            // 分配启用的节点数据
            $this->assign('trees', $trees);
            // 分配节点
            $this->assign('acc', $rs);
            $this->display();
        }
    }
}