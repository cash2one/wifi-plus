<?php
/**
 * User: yongli
 * Date: 17/9/19
 * Time: 15:55
 * Email: yong.li@szypwl.com
 * Copyright: 深圳优品未来科技有限公司
 */
namespace App\Controllers\Index;

use Api\MemberModel;
use App\Controllers\Base;
use Index\SmsConfigModel;
use Index\SmsModel;

/**
 * 高级收费功能 3G
 * Class Adv
 *
 * @package Index
 */
class Adv extends Base
{
    /**
     * 构造方法
     */
    public function initialization()
    {
        parent::initialization(); // TODO: Change the autogenerated stub
        $this->assign('a', 'advfun');
    }

    /**
     * 短信账号管理
     */
    public function set()
    {
        // 获得群发账号信息
        $info = SmsConfigModel::select('*')->whereUid($this->uid)->whereAction(0)->get()->toArray();
        $info = $info ? $info[0] : [];
        // 获得过滤短信账号信息
        $info1 = SmsConfigModel::select('*')->whereUid($this->uid)->whereAction(1)->get()->toArray();
        $info1 = $info1 ? $info1[0] : [];
        $this->assign('info', $info);
        $this->assign('info1', $info1);
        $this->display();
    }

    /**
     * 添加和修改设置
     */
    public function saveSet()
    {
        $post = $this->request->getPost();
        $info = SmsConfigModel::select('*')->whereUid($this->uid)->get()->toArray();
        $info = $info ? $info[0] : [];
        unset($post['sub']);
        if ($info) {
            //没有就添加
            $data['date1']['action']      = $post['action1'];
            $data['date1']['user']        = $post['user1'];
            $data['date1']['password']    = $post['password1'];
            $data['date']['action']       = $post['action'];
            $data['date']['user']         = $post['user'];
            $data['date']['password']     = $post['password'];
            $data['date']['uid']          = $this->uid;
            $data['date']['add_time']     = time();
            $data['date']['update_time']  = time();
            $data['date1']['uid']         = $this->uid;
            $data['date1']['add_time']    = time();
            $data['date1']['update_time'] = time();
            unset($post);
            foreach ($data as $value) {
                SmsConfigModel::insertGetId($value);
            }
        } else {
            //有就更新
            $data['date1']['action']      = $post['action1'];
            $data['date1']['user']        = $post['user1'];
            $data['date1']['password']    = $post['password1'];
            $data['date']['action']       = $post['action'];
            $data['date']['user']         = $post['user'];
            $data['date']['password']     = $post['password'];
            $data['date']['id']           = $post['id'];
            $data['date1']['id']          = $post['id1'];
            $data['date']['uid']          = $this->uid;
            $data['date']['add_time']     = time();
            $data['date']['update_time']  = time();
            $data['date1']['uid']         = $this->uid;
            $data['date1']['add_time']    = time();
            $data['date1']['update_time'] = time();
            unset($post);
            foreach ($data as $value) {
                SmsConfigModel::whereId($value['id'])->update($value);
            }
        }
        call_back(0);
    }


    // public function  test(){
    // 	import('@.ORG.XCSMS');
    // 	$server='http://221.122.112.136:8080/sms/mt.jsp?';
    // 	$u='76c5069c8921470d9605e516e9372cb7';
    // 	$p='PO7DJCVM';
    // 	$client=new XCSMS($server, $u, $p);
    // 	$client = new SoapClient('http://221.122.112.136:8080/sms/mt.jsp?');
    // 	$client->soap_defencoding='utf-8';
    // 	$client->decode_utf8=false;
    // 	echo $client->GetSmsAccount()."<br/>";
    // 	echo $client->GetSmsPrice()."<br/>";
    // 	echo $client->SendSms('15990531230', "您的验证码【1312da】，请勿泄漏【起讯科技】");
    // 	$this->assign('GetSmsAccount',$client->GetSmsAccount());
    // 	$this->assign('server',$server);
    // 	$this->display();
    // }
    /**
     * 手机号码列表
     */
    public function phoneList()
    {
        $build = MemberModel::select('*')->whereShopId($this->uid)->whereMode(1);
        $num   = $build->count();
        // 会员数据
        $result = $build->orderBy('login_time desc')->skip(($this->page - 1) * $this->perPage)->take($this->perPage)->get()->toArray();
        // 获得分页配置
        $config = set_page_config($num, $this->url, 3, $this->perPage);
        // 实例化分页类
        $pagination = \Config\Services::pagination();
        // 初始化分页配置
        $pagination->initialize($config);
        $page = $pagination->create_links();
        $this->assign('page', $page);
        $this->assign('lists', $result);
        $this->assign('a', 'advfun');
        $this->display();
    }

    /**
     * 手机号码下载
     */
    public function downPhone()
    {
        $data = MemberModel::select('phone')->whereUid($this->uid)->whereMode(1)->get()->toArray();
        export_excel($data, ['手机号码'], date('Y-m-d H:i:s', time()));
    }

    /**
     * 发送信息界面
     */
    public function sms()
    {
        $this->assign('a', 'advfun');
        $this->display();
    }

    public function doSend($phone, $msg)
    {

    }

    /**
     * 发送短信
     */
    public function addSms()
    {
        header("content-type:text/html;charset=utf-8");
        $post = $this->request->getPost();
        //        if ($post) {
        // 获得当前商户的发送信息的配置信息
        $info = SmsConfigModel::select('*')->whereUid($this->uid)->get()->toArray();
        $info = $info ? $info[0] : [];
        if (!$info) {
            call_back(2, '', '请先配置好短信帐号信息');
        }
        // 获得手机号码
        $list = explode(',', $post['phones']);
        // 获得要发送的信息
        $len = mb_strlen($post['info'], 'UTF-8');
        $ut  = ceil($len / 70); //计算短信数量（向上取整）
        // 发送时间
        $time = time();
        foreach ($list as $v) {
            if (!$v || !is_phone($v)) {
                call_back(2, '', '手机号码' . $v . '不正确');
            }
            $dataList [] = [
                'uid'         => $this->uid,
                'mode'        => 0,
                'phone'       => $v,
                'info'        => $post['info'],
                'lens'        => $len,//短信长度
                'unit'        => $ut,
                'add_time'    => $time,
                'update_time' => $time,
                'send_time'   => $time,
                'ready_time'  => $time,
                'state'       => 1,
                'lostcount'   => 0
            ];
        }
        // 发送短信服务器端的url
        $server = getenv('SMSURL');
        // 获得发送连接
        $url = $server . '?cpName=' . $info['user'] . '&cpPwd=' . $info['password'] . '&phones=' . $post['phones'] . '&msg=' . rawurlencode(iconv('UTF-8',
                'GB2312', $post['info']));
        // 自动重试5次，防止获取不正常(发送五次短信)
        if (function_exists('file_get_contents')) {
            $file_contents = file_get_contents($url);
        } else {
            $ch      = curl_init();
            $timeout = 5;
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
            $file_contents = curl_exec($ch);
            curl_close($ch);
        }
        if ($file_contents) {
            $rsArray = json_decode($url, true);
            if (isset ($rsArray['result']) && !empty ($rsArray['result'])) {
                if ($rsArray ['result'] == '01') {
                    $rs = 1;
                } else {
                    $rs = $rsArray['result'];
                }
            }
        }
        // 调用XCSMS发送类
        $client = new \XmlSms($server, $info['user'], $info['password']);
        // 发送手机信息
        $rs = $client->SendSms($post['phones'], $post['info']);
        if ($rs == 1) {
            // 向sms表中添加数据
            SmsModel::insert($dataList);
            call_back(0);
        } else if ($rs == '02') {
            call_back(2, '', 'IP限制');
        } else if ($rs == '03') {
            call_back(2, '', '用户名密码错误');
        } else if ($rs == '04') {
            call_back(2, '', '剩余条数不足');
        } else if ($rs == '05') {
            call_back(2, '', '信息内容中含有限制词(违禁词)');
        } else if ($rs == '06') {
            call_back(2, '', '信息内容为黑内容');
        } else if ($rs == '07') {
            call_back(2, '', '该用户的该内容 受同天内内容不能重复发 限制');
        } else if ($rs == '08') {
            call_back(2, '', '批量下限不足');
        } else if ($rs == '11') {
            call_back(2, '', '已超出100条最大手机数量');
        } else if ($rs == '12') {
            call_back(2, '', 'bechtech防火墙无法处理这种短信');
        } else if ($rs == '13') {
            call_back(2, '', 'bechtech用户账户被冻结');
        } else if ($rs == '14') {
            call_back(2, '', '手机号码不正确或者为空');
        } else if ($rs == '97') {
            call_back(2, '', 'bechtech网关异常');
        } else if ($rs == '98') {
            call_back(2, '', '不符合bechtech的免审模板');
        } else if ($rs == '99') {
            call_back(2, '', 'bechtech系统异常');
        } else if ($rs == '100') {
            call_back(2, '', 'bechtech系统例行维护（一般会在凌晨0点~凌晨1点期间进行5分钟左右的升级维护）');
        } else {
            call_back(2, '', '发送失败,错误码:' . $rs);
        }
    }

    /**
     * 短信发送列表
     */
    public function smsList()
    {
        $build = SmsModel::select('*')->whereUid($this->uid);
        $num   = $build->count();
        // 报表数据
        $result = $build->skip(($this->page - 1) * $this->perPage)->take($this->perPage)->orderBy('add_time',
            'desc')->get()->toArray();
        // 获得分页配置
        $config = set_page_config($num, $this->url, 3, $this->perPage);
        // 实例化分页类
        $pagination = \Config\Services::pagination();
        // 初始化分页配置
        $pagination->initialize($config);
        $page = $pagination->create_links();
        $this->assign('page', $page);
        $this->assign('lists', $result);
        $this->assign('a', 'advfun');
        $this->display();
    }

}