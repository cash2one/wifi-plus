<?php
/**
 * User: yongli
 * Date: 17/9/19
 * Time: 15:56
 * Email: yong.li@szypwl.com
 * Copyright: 深圳优品未来科技有限公司
 */
namespace App\Controllers\Index;

use ShopModel;
use Api\MemberModel;
use Api\CommentModel;
use WifiAdmin\NoticeModel;
use WifiAdmin\AuthListModel;
use App\Controllers\Base;
use Illuminate\Database\Capsule\Manager as DB;

/**
 * Class User
 *
 * @package App\Controllers\Index
 */
class User extends Base
{
    /**
     * 映射字典
     *
     * @var array
     */
    public $enumData = [
        'shop_level' => [//消费水平
            ['key' => '低端', 'txt' => '低端'],
            ['key' => '工薪', 'txt' => '工薪'],
            ['key' => '小资', 'txt' => '小资'],
            ['key' => '中高档', 'txt' => '中高档'],
            ['key' => '高档', 'txt' => '高档'],
            ['key' => '奢华', 'txt' => '奢华'],
        ],
        'trades'     => [//行业类别
            ['key' => '餐饮', 'txt' => '餐饮'],
            ['key' => '酒店', 'txt' => '酒店'],
            ['key' => '咖啡厅', 'txt' => '咖啡厅'],
            ['key' => '足浴', 'txt' => '足浴'],
            ['key' => 'KTV', 'txt' => 'KTV'],
            ['key' => '购物商超', 'txt' => '购物商超'],
            ['key' => '酒店宾馆', 'txt' => '酒店宾馆'],
            ['key' => '休闲娱乐', 'txt' => '休闲娱乐'],
        ],
        'auth_mode'  => [//认证方式
            ['key' => '0', 'txt' => '注册认证', 'code' => 'reg'],
            ['key' => '1', 'txt' => '手机认证', 'code' => 'phone'],
            ['key' => '2', 'txt' => '无需认证', 'code' => 'allow'],
            //['key' => '3', 'txt' => '微信密码认证', 'code' => 'wecha'],
            ['key' => '4', 'txt' => '微信关注认证', 'code' => 'wecha_follow'],
        ],
    ];

    /**
     * 构造函数
     */
    public function initialization()
    {
        parent::initialization(); // TODO: Change the autogenerated stub
        header("Content-type:text/html;charset=utf-8");
        $this->assign('a', $this->method);
        $this->assign('c', $this->controller);
    }

    /**
     * 获取商户信息
     */
    public function info()
    {
        // 获得当前商户信息
        $info = ShopModel::select([
            'shop_name',
            'province',
            'logo',
            'city',
            'area',
            'address',
            'shop_group',
            'shop_level',
            'trade',
            'linker',
            'phone'
        ])->whereId($this->uid)->get()->toArray();
        $info = $info ? $info[0] : [];
        //
        if ($info) {
            $info ['logo'] = $this->downloadUrl($info['logo']);
        }
        // 分配商户消费水平及，行业类别
        $this->assign('enumData', $this->enumData);
        // 分配当前商户信息
        $this->assign('info', $info);
        $this->display();
    }

    /**
     * 商户登录首页
     */
    public function index()
    {
        // 获得系统提示信息
        $notes = NoticeModel::select('*')->orderBy('create_time desc')->skip(0)->take(5)->get()->toArray();
        $this->assign('notice', $notes);
        $this->display();
    }

    /**
     *
     */
    public function doIndex()
    {
        $postData = $this->request->getPost();
        if (!is_null($_FILES['img']['name']) && $_FILES['img']['name'] != '') {
            list ($ret, $err) = $this->uploadFile($this->uid, $_FILES['img']['name'], $_FILES['img']['tmp_name']);
            if ($err !== null) {
                call_back(2, '', '上传失败');
            }
            $postData['logo'] = $ret ['key'];
        }
        $lv = '';
        // 商业消费水平
        foreach ($postData['shop_level'] as $K => $v) {
            $lv .= '#' . $v . '#';
        }
        $postData['shop_level'] = $lv;
        $trade                  = '';
        // 行业类别
        foreach ($postData['trade'] as $K => $v) {
            $trade .= '#' . $v . '#';
        }
        $postData['trade'] = $trade;
        if ($postData['phone']) {
            if (!is_phone($postData['phone'])) {
                call_back(2, '', '手机号码不正确');
            }
        }
        // 添加数据
        $status = ShopModel::whereId($this->uid)->update($postData);
        $status ? call_back(0) : call_back(2, '', '操作出错，请重新操作');
    }

    /**
     * 显示商户登录界面
     */
    public function login()
    {
        $this->display();
    }

    /**
     * 执行登录检测
     *
     * @return mixed
     */
    public function doLogin()
    {
        $postData = $this->request->getPost();
        if (!$postData) {
            call_back(2, '', '服务器忙，请稍候再试');
        }
        // 获得商户的用户名和密码
        $user     = isset ($postData['user']) ? strval($postData['user']) : '';
        $pass     = isset ($postData['password']) ? strval($postData['password']) : '';
        $shopInfo = ShopModel::select([
            'id',
            'account',
            'shop_name',
            'pid'
        ])->whereAccount($user)->wherePassword(md5($pass))->get()->toArray();
        $shopInfo = $shopInfo ? $shopInfo[0] : [];
        // 将当前的商户信息(账号、商铺名称、代理商id)存放到session中
        if (!$shopInfo) {
            call_back(2, '', '帐号信息不正确');
        }
        $_SESSION['uid']       = $shopInfo ['id'];
        $_SESSION['user']      = $shopInfo ['account'];
        $_SESSION['shop_name'] = $shopInfo ['shop_name'];
        $_SESSION['pid']       = $shopInfo ['pid'];
        // 当商户登陆成功后，异步返回登陆成功信息并且跳转到商户首页
        //                $data ['error'] = 0;
        //                $data ['msg']   = '';
        //                $data ['url']   = U('user/index');
        //                return $this->ajaxReturn($data);
        // $this->success('登录成功','index.php?m=User');
        call_back(0);

    }

    // 显示商户注册页面
    public function register()
    {
        $this->display();
    }

    /**
     * 检查商户注册信息
     *
     * @return mixed
     */
    public function doRegister()
    {
        $postData = $this->request->getPost();
        // 存在post提交数据
        if (!$postData) {
            // 没有注册的post数据时，执行以下代码
            call_back(2, '', '请提交数据!');
        }
        $hid = isset ($postData['do_act']) ? strval($postData['doact']) : '';
        if ($hid != 'do_reg') {
            // 没有注册的post数据时，执行以下代码
            call_back(2, '', '服务器忙，请稍候再试');
        }
        $postData['mode']        = 0; //注册用户
        $postData['auth_mode']   = '#0#'; //注册用户
        $postData['auth_action'] = 1; //认证后调整模式
        $postData['password']    = md5($postData['password']); //对注册用户密码进行加密
        $postData['create_time'] = time();
        $postData['update_time'] = time();
        $aid                     = ShopModel::insertGetId($postData);
        if (!$aid) {
            call_back(2, '', '服务器忙，请稍候再试');
        }
        $_SESSION['uid']       = $aid;
        $_SESSION['user']      = $postData['account'];
        $_SESSION['shop_name'] = $postData['shop_name'];
        call_back(0);
        //                $user                    = D('Shop');
        //                // 自动验证
        //                if ($user->create()) {
        //                    // 向shop表中添加商户注册信息
        //                    $aid = $user->add();
        //                    // 并且将商户注册的信息存放到session中
        //                    if ($aid) {
        //                        session('uid', $aid);
        //                        session('user', $_POST ['account']);
        //                        session('shop_name', $_POST ['shopname']);
        //                        // 当商户注册成功后，异步返回注册成功信息并且跳转到商户首页
        //                        $data ['error'] = 0;
        //                        $data ['msg']   = "OK";
        //                        $data ['url']   = U('user/index');
        //
        //                        return $this->ajaxReturn($data);
        //                    } else {
        //                        // 商户注册信息添加失败
        //                        $data ['error'] = 1;
        //                        $data ['msg']   = "服务器忙，请稍候再试";
        //
        //                        return $this->ajaxReturn($data);
        //                    }
        //                } else {
        //                    // 当商户注册失败后，异步返回注册失败信息并且跳转到商户首页
        //                    $data ['error'] = 1;
        //                    $data ['msg']   = $user->getError();
        //
        //                    return $this->ajaxReturn($data);
        //                }
        //            } else {
        //                // 不执行注册动作
        //                $data ['error'] = 1;
        //                $data ['msg']   = "服务器忙，请稍候再试";
        //
        //                return $this->ajaxReturn($data);
        //            }
    }

    /**
     * 商户退出登录
     */
    public function loginOut()
    {
        session_destroy();
        // 跳转到商户登入界面
        //        $this->redirect('index/index');
        call_back(0);
    }

    /**
     * 显示当前商户修改密码界面
     */
    public function account()
    {
        $this->display();
    }

    /**
     * 执行当前商户修改密码动作
     */
    public function doAccount()
    {
        $postData = $this->request->getPost();
        if ($postData) {
            $postData['update_time'] = time();
            $status                  = ShopModel::whereId($this->uid)->update($postData);
            $status ? call_back(0) : call_back(2, '', '修改密码失败');
            //            $user = D('Shop');
            //            if ($user->create()) {
            //                if ($user->where("id = {$uid}")->save()) {
            //                    $this->success('修改密码成功');
            //                } else {
            //                    $this->error('修改密码错误');
            //                }
            //            }
        } else {
            call_back(2, '', '密码不允许为空');
            //            $this->error('密码不允许为空');
        }
    }

    /**
     * 应用设置
     */
    public function application()
    {
        $info = ShopModel::select([
            'auth_mode',
            'wx',
            'notice',
            'auth_action',
            'jump_url',
            'time_limit',
            'sh',
            'eh',
            'count_flag',
            'max_count',
            'wx_id',
            'wx_token',
            'sms_status',
            'company_name',
            'auth_msg',
            'wx_url',
            'code_img'
        ])->whereId($this->uid)->get()->toArray();
        $info = $info ? $info[0] : [];
        // 分配认证方式
        $this->assign('auth_mode', $this->enumData['auth_mode']);
        // 分配当前登录的商户信息
        $this->assign('info', $info);
        $this->display();
    }

    /**
     * 向shop表中添加应用设置
     */
    public function doApp()
    {
        $post = $this->request->getPost();
        // 上传二维码
        if (isset($_FILES['img']) && !is_null($_FILES['img']['name']) && $_FILES['img']['name'] != '') {
            $post['code_img'] = $this->uploadFile($this->uid, $_FILES['img']['name'], $_FILES['img']['tmp_name']);
        }
        // 上网开始时间
        $sh = intval($post['sh']);
        // 上网结束时间
        $eh = intval($post['eh']);
        // 判断开始时间和结束时间的(开始时间一定要小于结束时间)
        if ($sh > $eh) {
            call_back(2, '', '上网结束时段不能小于开始时段');
        }
        // 认证模式
        $auth_mode = '';
        // 认证模式
        foreach ($post['auth_mode'] as $K => $v) {
            // 当认证模式为微信密码认证时
            if ($v == 3) {
                // 获得微信号
                $wx['user'] = $post['wx'];
                // 获得微信密码
                $wx['pwd'] = $post['wx_auth_pwd'];
                // 组合成(#3={"user":"123123","pwd":"123123"}#)
                $auth_mode .= '#' . $v . '=' . json_encode($wx) . '#';
            } else {
                // 其他认证模式(例如：#1#)
                $auth_mode .= '#' . $v . '#';
            }
        }
        // 获得上网限制状态(0:停用，1:启用)
        $isCount = intval($post['count_flag']);
        // 上网状态为启用
        if ($isCount > 0) {
            // 上网允许认证次数
            if (empty ($post['max_count'])) {
                call_back(2, '', '上网允许认证次数不能为空');
            }
            // 上网时间限制
            if (!is_numeric($post['max_count'])) {
                call_back(2, '', '上网允许认证次数必须是数字');

            }
            // 检测上网允许认证次数是否超出范围(1-299)
            $max_count = intval($post['max_count']);
            if ($max_count < 0 || $max_count > 600) {
                call_back(2, '', '上网允许认证次数范围在1-600');
            }
        } else {
            // 默认上网允许认证次数为0次
            $post['max_count'] = 0;
        }
        //将验证方式压人到post中
        $post['auth_mode'] = $auth_mode;
        // 当没有认证方式时，默认的认证方式为注册验证
        if (!$post['auth_mode']) {
            $post['auth_mode'] = '#0#';
        }
        // 上网时间限制(允许用户上网的时间(单位:分钟)。注:不限制时间请填:0)
        if (!$post['time_limit'] == '') {
            // is_numeric:检测变量是否为数字或数字字符串
            if (!is_numeric($post['time_limit'])) {
                call_back(2, '', '输入的上网时间必须是数字类型');
            }
        }
        // 当认证后行为是1时，跳转到网址为$_POST ['jumpurl'];
        if ($post['auth_action'] == 1 && $post['jump_url'] == '') {
            call_back(2, '', '请输入要跳转的网址');

        }
        // 当认证行为后为跳转指定网页
        if ($post['auth_action'] == 1) {
            // $postData['jump_url']是不是完整的网址
            if (!is_url($post['jump_url'])) {
                call_back(2, '', '输入的网址必须以http://开始');
            }
        }
        // 将更新时间压入到post中
        $post['update_time'] = time();
        // 设置短信模板(默认)
        if (!trim($post['auth_msg'])) {
            $post['auth_msg'] = "欢迎使用无线网络，你的认证码是【*】";
        }
        // 保存修改后的应用设置信息
        $status = ShopModel::whereId($this->uid)->update($post);
        $status ? call_back(0) : call_back(2, '', '操作失败');
    }

    /**
     * 广告
     */
    public function adv()
    {
        $build = \AdModel::select(['id', 'ad_pos', 'ad_thumb', 'ad_sort', 'mode'])->whereUid($this->uid);
        $num   = $build->count();
        // 广告数据
        $result = $build->orderBy('ad_sort desc')->skip(($this->page - 1) * $this->perPage)->take($this->perPage)->get()->toArray();
        // 获得分页配置
        $config = set_page_config($num, $this->url, 3, $this->perPage);
        // 实例化分页类
        $pagination = \Config\Services::pagination();
        // 初始化分页配置
        $pagination->initialize($config);
        $page = $pagination->create_links();
        foreach ($result as &$rs) {
            $rs ['ad_thumb'] = $this->downloadUrl($rs['ad_thumb']);
        }
        $len = count($result);
        // 分配页码
        $this->assign('page', $page);
        $this->assign('len', $len);
        $this->assign('lists', $result);
        $this->display();
    }

    /**
     * 添加广告
     */
    public function addAdv()
    {
        $count = \AdModel::select('id')->whereUid($this->uid)->whereAdPos(1)->count();
        $this->assign('len', $count);
        $this->display();
    }

    /**
     * 编辑广告
     */
    public function editAd()
    {
        $id     = $this->request->getGet('id');
        $id     = $id ? intval($id) : 0;
        $result = \AdModel::select('*')->whereId($id)->whereUid($this->uid)->get()->toArray();
        $result = $result ? $result[0] : [];
        if (!$result) {
            call_back(2, '', '无此广告信息!');
        }
        $result['ad_thumb'] = $this->downloadUrl($result['ad_thumb']);
        $this->assign('info', $result);
        $this->display();
    }

    /**
     * 执行编辑动作
     */
    public function doEditAd()
    {
        $post   = $this->request->getPost();
        $id     = $post['id'] ? intval($post['id']) : 0;
        $result = \AdModel::select('id')->whereId($id)->whereUid($this->uid)->get()->toArray();
        $result = $result ? $result[0] : [];
        !$result ? call_back(2, '', '无此广告信息!') : '';
        if ($_FILES['img']['name']) {
            $path = $this->uploadFile($this->uid, $_FILES['img']['name'], $_FILES['img']['tmp_name']);
            //7牛上传
            $this->delete($result['ad_thumb']);//删除旧数据
            $post['ad_thumb'] = $path;
        }
        $post['uid'] = $this->uid;
        $status      = \AdModel::whereId($id)->whereUid($this->uid)->update($post);
        $status ? call_back(0) : call_back(2, '', '操作失败!');
        //        $this->success('修改成功', U('user/adv', '', true, true, true));
    }

    /**
     * 删除广告
     */
    public function delAd()
    {
        $id    = $this->request->getGet('id');
        $id    = $id ? intval($id) : 0;
        $thumb = \AdModel::select(['ad_thumb', 'id'])->whereId($id)->get()->toArray();
        $thumb = $thumb ? $thumb[0] : [];
        !$thumb ? call_back(2, '', '该广告不存在!') : '';
        $status = \AdModel::whereId($id)->update(['is_delete' => 1]);
        !$status ? call_back(2, '', '操作失败!') : '';
        if (file_exists('.' . $thumb['ad_thumb'])) {
            unlink('.' . $thumb['ad_thumb']);
        }
        call_back(0);
        //        $this->success('删除成功', U('user/adv'));
    }

    /**
     * 添加广告
     */
    public function doAdv()
    {
        $post = $this->request->getPost();
        //7牛上传
        $path                = $this->uploadFile($this->uid, $_FILES ['img'] ['name'], $_FILES ['img'] ['tmp_name']);
        $post['uid']         = $this->uid;
        $post['ad_thumb']    = $path;
        $post['ad_sort']     = isset ($post['ad_sort']) ? $post['ad_sort'] : 0;
        $post['create_time'] = time();
        $post['update_time'] = time();
        $post['create_by']   = $this->uid;
        $post['update_by']   = $this->uid;
        $status              = \AdModel::insertGetid($post);
        $status ? call_back(0) : call_back(2, '', '操作失败!');
        //        $this->success('添加广告成功', U('User/adv', '', true, true, true));
    }

    /**
     * 路由信息
     */
    public function route()
    {
        $info = \RouteMapModel::select('*')->whereShopId($this->uid)->get()->toArray();
        $info = $info ? $info[0] : [];
        $this->assign('a', $this->method);
        $this->assign('info', $info);
        $this->display();
    }

    /**
     * 路由管理
     */
    public function routeMap()
    {
        $build = \RouteMapModel::select([
            'id',
            'route_name',
            'sort_id',
            'gw_id',
            'add_time',
            'last_heartbeat_time'
        ])->whereShopId($this->uid);
        $num   = $build->count();
        // 路由数据
        $result = $build->orderBy([
            'sort_id'  => 'asc',
            'add_time' => 'asc'
        ])->skip(($this->page - 1) * $this->perPage)->take($this->perPage)->get()->toArray();
        // 获得分页配置
        $config = set_page_config($num, $this->url, 3, $this->perPage);
        // 实例化分页类
        $pagination = \Config\Services::pagination();
        // 初始化分页配置
        $pagination->initialize($config);
        $page = $pagination->create_links();
        // 分配页码
        $this->assign('page', $page);
        $this->assign('lists', $result);
        $this->display();

    }

    /**
     * 编辑路由信息
     */
    public function editRoute()
    {
        $post = $this->request->getPost();
        if ($post) {
            $id     = $post['id'] ?? 0;
            $result = \RouteMapModel::select('id')->whereId($id)->whereShopId($this->uid)->get()->toArray();
            $result = $result ? $result[0] : [];
            //
            $post['update_time'] = time();
            $post['update_by']   = $this->uid;
            if (!$result) {
                call_back(2, '', '没有此路由信息!');
            }
            $status = \RouteMapModel::whereId($id)->whereShopId($this->uid)->update($post);
            $status ? call_back(0) : call_back(2, '', '操作失败!');
            //            $this->success('更新成功', U('user/routemap', '', true, true, true));
        } else {
            $id     = $this->request->getGet('id');
            $id     = $id ? intval($id) : 0;
            $result = \RouteMapModel::select([
                'id',
                'shop_id',
                'route_name',
                'gw_id',
                'sort_id',
                'hotspot_name',
                'hotspot_pass'
            ])->whereId($id)->whereShopId($this->uid)->get()->toArray();
            $result = $result ? $result[0] : [];
            $result ? call_back(2, '', '没有此路由信息!') : '';
            // 分配当前要编辑的路由信息
            $this->assign('info', $result);
            $this->display();
        }

    }

    /**
     * 添加路由信息
     */
    public function addRoute()
    {
        $post = $this->request->getPost();
        if ($post) {
            $post['add_time']            = time();
            $post['create_time']         = time();
            $post['update_time']         = time();
            $post['last_heartbeat_time'] = time();
            $post['shop_id']             = $this->uid;
            // 添加数据
            $status = \RouteMapModel::insertGetId($post);
            $status ? call_back(0) : call_back(2, '', '操作失败!');
            //            $this->success('添加成功', U('user/routemap', '', true, true, true));
        } else {
            $this->display();
        }
    }

    /**
     * 保存路由信息
     */
    public function saveRoute()
    {
        $post = $this->request->getPost();
        // 获得当前商户的路由信息
        $info = \RouteMapModel::select('*')->whereShopId($this->uid)->get()->toArray();
        $info = $info ? $info[0] : [];
        // 存在当前商户的路由信息
        if (!$info) {
            $post['shop_id']     = $this->uid;
            $post['sort_id']     = 0;
            $post['create_time'] = time();
            $post['update_time'] = time();
            $post['create_by']   = $this->uid;
            $post['update_by']   = $this->uid;
            $status              = \RouteMapModel::insertGetId($post);
        } else {
            $where['id']         = $info['id'];
            $post['shop_id']     = $this->uid;
            $post['sort_id']     = 0;
            $post['update_time'] = time();
            $status              = \RouteMapModel::whereId($info['id'])->update($post);
        }
        $status ? call_back(0) : call_back(2, '', '操作失败!');
        //        $this->success('更新成功', U('user/route', '', true, true, true));
    }

    /**
     * 删除路由信息
     */
    public function delRoute()
    {
        $id     = $this->request->getGet('id');
        $id     = $id ? intval($id) : 0;
        $result = \RouteMapModel::select('*')->whereId($id)->whereShopId($this->uid)->get()->toArray();
        $result = $result ? $result[0] : [];
        !$result ? call_back(2, '', '没有此路由信息!') : '';
        $status = \RouteMapModel::whereId($id)->whereShopId($this->uid)->update(['is_delete' => 1]);
        $status ? call_back(0) : call_back(2, '', '操作失败!');
    }

    /**
     * 上网统计
     */
    public function online()
    {
        $build = AuthListModel::select('*')->whereShopId($this->uid);
        $num   = $build->count();
        // 认证数据
        $result = $build->orderBy('login_time desc')->skip(($this->page - 1) * $this->perPage)->take($this->perPage)->get()->toArray();
        // 获得分页配置
        $config = set_page_config($num, $this->url, 3, $this->perPage);
        // 实例化分页类
        $pagination = \Config\Services::pagination();
        // 初始化分页配置
        $pagination->initialize($config);
        $page = $pagination->create_links();
        $this->assign('page', $page);
        $this->assign('lists', $result);
        $this->display();
    }

    /**
     * 用户统计
     */
    public function report()
    {
        $build = MemberModel::select('*')->whereShopId($this->uid)->whereIn('mode', [0, 1]);
        $num   = $build->count();
        // 用户数据
        $result = $build->orderBy('login_time desc')->skip(($this->page - 1) * $this->perPage)->take($this->perPage)->get()->toArray();
        // 获得分页配置
        $config = set_page_config($num, $this->url, 3, $this->perPage);
        // 实例化分页类
        $pagination = \Config\Services::pagination();
        // 初始化分页配置
        $pagination->initialize($config);
        $page = $pagination->create_links();
        $this->assign('page', $page);
        $this->assign('lists', $result);
        $this->display();
    }

    /**
     * 上网统计
     */
    public function rpt()
    {
        $this->assign('a', 'online');
        $this->display();
    }

    /**
     * 导出上网统计表
     */
    public function downRpt()
    {
        // 获得查询类型( 今日数据统计、昨日统计、最近七天、本月统计)
        $param = $this->request->getGet();
        $sql   = $this->_getRptSql($param);
        !$sql ? call_back(2, '', '参数不正确') : '';
        $result = DB::select($sql);
        switch (strtolower($param['mode'])) {
            case 'today' :
                $fm = [['统计时段', 't'], ['24小时上网流量', 'ct']];
                break;
            case 'yesterday' :
                $fm = [['统计时段', 't'], ['24小时上网流量', 'ct']];
                break;
            case 'week' :
                $fm = [['统计日期', 'td'], ['日上网流量', 'ct']];
                break;
            case 'query' :
                $fm = [['统计日期', 'td'], ['日上网流量', 'ct']];
                break;
        }
        exportexcelByKey($result, $fm, date('Y-m-d H:i:s', time()));
    }

    /**
     * 用户统计图表
     *
     */
    public function userChart()
    {
        $this->assign('a', 'report');
        $this->display();
    }

    /**
     * 导出用户统计报表
     */
    public function downChart()
    {
        $param = $this->request->getGet();
        $sql   = $this->_getUserChartSql($param);
        !$sql ? call_back(2, '', '参数不正确!') : '';
        $data = DB::select($sql);
        switch (strtolower($param['mode'])) {
            case 'today' :
                $fm = [
                    ['统计时段', 'show_date'],
                    ['认证总人数', 'total_count'],
                    ['注册认证', 'reg_count'],
                    ['手机认证', 'phone_count']
                ];
                break;
            case 'yesterday' :
                $fm = [
                    ['统计时段', 'show_date'],
                    ['认证总人数', 'total_count'],
                    ['注册认证', 'reg_count'],
                    ['手机认证', 'phone_count']
                ];
                break;
            case 'week' :
                $fm = [
                    ['统计日期', 'show_date'],
                    ['认证总人数', 'total_count'],
                    ['注册认证', 'reg_count'],
                    ['手机认证', 'phone_count']
                ];
                break;
            case 'query' :
                $fm = [
                    ['统计日期', 'show_date'],
                    ['认证总人数', 'tot_alcount'],
                    ['注册认证', 'reg_count'],
                    ['手机认证', 'phone_count']
                ];
                break;
        }
        exportexcelByKey($data, $fm, date('Y-m-d H:i:s', time()));
    }

    /**
     * 获得用户统计数据
     */
    public function getUserChart()
    {
        $way = $this->request->getGet('mode');
        switch (strtolower($way)) {
            case "today" :
                $sql = 'select t,CONCAT(CURDATE()," ",t,"点") as show_date, COALESCE(total_count,0)  as total_count, COALESCE(reg_count,0)  as reg_count ,COALESCE(phone_count,0) as phone_count from wifi_hours a left JOIN ';
                $sql .= '(select thour, count(id) as total_count , count(CASE when mode=0 then 1 else null end) as reg_count, count(CASE when mode=1 then 1 else null end) as phone_count from ';
                $sql .= '(select  FROM_UNIXTIME(add_time,"%H") as thour,id,mode from wifi_member ';
                $sql .= 'where add_date="' . date('Y-m-d') . '" and ( mode=0 or mode=1 ) and shop_id=' . $this->uid;
                $sql .= ' )a group by thour ) c ';
                $sql .= 'on a.t=c.thour ';
                break;
            case 'yesterday' :
                $sql = 'select t,CONCAT(CURDATE()," ",t,"点") as show_date, COALESCE(total_count,0)  as total_count, COALESCE(reg_count,0)  as reg_count ,COALESCE(phone_count,0) as phone_count from wifi_hours a left JOIN ';
                $sql .= '(select thour, count(id) as total_count , count(CASE when mode=0 then 1 else null end) as reg_count, count(CASE when mode=1 then 1 else null end) as phone_count from ';
                $sql .= '(select  FROM_UNIXTIME(add_time,"%H") as thour,id,mode from wifi_member ';
                $sql .= 'where add_date=DATE_ADD(CURDATE() ,INTERVAL -1 DAY) and ( mode=0 or mode=1 ) and shop_id=' . $this->uid;
                $sql .= ')a group by thour ) c ';
                $sql .= 'on a.t=c.thour ';
                break;
            case 'week' :
                $sql = 'select td as show_date,right(td,5) as td,datediff(td,CURDATE()) as t, COALESCE(total_count,0)  as total_count, COALESCE(reg_count,0)  as reg_count ,COALESCE(phone_count,0) as phone_count from ';
                $sql .= '(select CURDATE() as td ';
                for ($i = 1; $i < 7; $i++) {
                    $sql .= ' UNION all select DATE_ADD(CURDATE() ,INTERVAL -' . $i . ' DAY) ';
                }
                $sql .= 'ORDER BY td ) a left join ';
                $sql .= '(select add_date,count(id) as total_count , count(CASE when mode=0 then 1 else null end) as reg_count, count(CASE when mode=1 then 1 else null end) as phone_count from wifi_member ';
                $sql .= ' where shop_id=' . $this->uid . ' and add_date between DATE_ADD(CURDATE() ,INTERVAL -6 DAY) and CURDATE()  and ( mode=0 or mode=1 ) GROUP BY  add_date';
                $sql .= ') b on a.td=b.add_date ';
                break;
            case 'month' :
                $sql = 'select tname as show_date,tname as t, COALESCE(total_count,0)  as total_count, COALESCE(reg_count,0)  as reg_count ,COALESCE(phone_count,0) as phone_count from wifi_day  a left JOIN ';
                $sql .= '( select right(add_date,2) as td ,count(id) as total_count , count(CASE when mode=0 then 1 else null end) as reg_count, count(CASE when mode=1 then 1 else null end) as phone_count from wifi_member ';
                $sql .= 'where  shop_id=' . $this->uid . ' and  add_date >= "' . date('Y-m-01') . '" and ( mode=0 or mode=1 ) GROUP BY  add_date';
                $sql .= ') b on a.tname=b.td ';
                $sql .= ' where a.id between 1 and  ' . date('t');
                break;
            case 'query' :
                $param = $this->request->getGet();
                //                import("ORG.Util.Date");
                $dt      = new Date ($param['start_date']);
                $leftDay = $dt->dateDiff($param['end_date'], 'd');
                $sql     = 'select td as show_date,right(td,5) as td,datediff(td,CURDATE()) as t,COALESCE(total_count,0)  as totalcount, COALESCE(reg_count,0)  as reg_count ,COALESCE(phone_count,0) as phone_count  from ';
                $sql .= '( select "' . $param['start_date'] . '" as td ';
                for ($i = 0; $i <= $leftDay; $i++) {
                    $sql .= ' UNION all select DATE_ADD("' . $param['start_date'] . '" ,INTERVAL ' . $i . ' DAY) ';
                }
                $sql .= ') a left join ';
                $sql .= '(select add_date,count(id) as total_count , count(CASE when mode=0 then 1 else null end) as reg_count, count(CASE when mode=1 then 1 else null end) as phone_count  from wifi_member ';
                $sql .= 'where  shop_id=' . $this->uid . ' and add_date between "' . $param['start_date'] . '" and "' . $param['end_date'] . '"  and ( mode=0 or mode=1 ) GROUP BY  add_date ';
                $sql .= ') b on a.td=b.add_date ';
                break;
        }
        $data = DB::select($sql);
        call_back(0, $data);
    }

    /**
     * 获得用户统计数据sql语句
     *
     * @param $param
     *
     * @return string
     */
    private function _getUserChartSql($param)
    {
        switch (strtolower($param['mode'])) {
            case 'today' :
                $sql = 'select t,CONCAT(CURDATE()," ",t,"点") as show_date, COALESCE(total_count,0)  as total_count, COALESCE(reg_count,0)  as reg_count ,COALESCE(phone_count,0) as phone_count from wifi_hours a left JOIN ';
                $sql .= '(select thour, count(id) as total_count , count(CASE when mode=0 then 1 else null end) as reg_count, count(CASE when mode=1 then 1 else null end) as phone_count from ';
                $sql .= '(select  FROM_UNIXTIME(add_time,"%H") as thour,id,mode from wifi_member ';
                $sql .= 'where add_date="' . date('Y-m-d') . '" and ( mode=0 or mode=1 ) and shop_id=' . $this->uid;
                $sql .= ' )a group by thour ) c ';
                $sql .= 'on a.t=c.thour ';
                break;
            case 'yesterday' :
                $sql = 'select t,CONCAT(CURDATE()," ",t,"点") as show_date, COALESCE(total_count,0)  as total_count, COALESCE(reg_count,0)  as reg_count ,COALESCE(phone_count,0) as phone_count from wifi_hours a left JOIN ';
                $sql .= '(select thour, count(id) as total_count , count(CASE when mode=0 then 1 else null end) as reg_count, count(CASE when mode=1 then 1 else null end) as phone_count from ';
                $sql .= '(select  FROM_UNIXTIME(add_time,"%H") as thour,id,mode from wifi_member ';
                $sql .= 'where add_date=DATE_ADD(CURDATE() ,INTERVAL -1 DAY) and ( mode=0 or mode=1 ) and shop_id=' . $this->uid;
                $sql .= ')a group by thour ) c ';
                $sql .= 'on a.t=c.thour ';
                break;
            case 'week' :
                $sql = 'select td as show_date,right(td,5) as td,datediff(td,CURDATE()) as t, COALESCE(total_count,0)  as total_count, COALESCE(reg_count,0)  as reg_count ,COALESCE(phone_count,0) as phone_count from ';
                $sql .= '( select CURDATE() as td ';
                for ($i = 1; $i < 7; $i++) {
                    $sql .= '  UNION all select DATE_ADD(CURDATE() ,INTERVAL -' . $i . ' DAY) ';
                }
                $sql .= ' ORDER BY td ) a left join ';
                $sql .= '( select add_date,count(id) as total_count , count(CASE when mode=0 then 1 else null end) as reg_count, count(CASE when mode=1 then 1 else null end) as phone_count from wifi_member ';
                $sql .= 'where shop_id=' . $this->uid . ' and add_date between DATE_ADD(CURDATE() ,INTERVAL -6 DAY) and CURDATE()  and ( mode=0 or mode=1 ) GROUP BY  add_date ';
                $sql .= ') b on a.td=b.add_date ';
                break;
            case 'month' :
                $sql = ' select tname as show_date,tname as t, COALESCE(total_count,0)  as total_count, COALESCE(reg_count,0)  as reg_count ,COALESCE(phone_count,0) as phone_count from wifi_day  a left JOIN ';
                $sql .= '( select right(add_date,2) as td ,count(id) as total_count , count(CASE when mode=0 then 1 else null end) as reg_count, count(CASE when mode=1 then 1 else null end) as phone_count from wifi_member ';
                $sql .= 'where  shop_id=' . $this->uid . ' and  add_date >= "' . date('Y-m-01') . '" and ( mode=0 or mode=1 ) GROUP BY  add_date ';
                $sql .= ') b on a.tname=b.td ';
                $sql .= 'where a.id between 1 and  ' . date('t');
                break;
            case "query" :
                //                import("ORG.Util.Date");
                $dt      = new Date ($param['start_date']);
                $leftDay = $dt->dateDiff($param['end_date'], 'd');
                $sql     = 'select td as show_date,right(td,5) as td,datediff(td,CURDATE()) as t,COALESCE(total_count,0)  as total_count, COALESCE(reg_count,0)  as reg_count ,COALESCE(phone_count,0) as phone_count  from ';
                $sql .= '( select "' . $param['start_date'] . '"" as td ';
                for ($i = 0; $i <= $leftDay; $i++) {
                    $sql .= '  UNION all select DATE_ADD("' . $param['start_date'] . '" ,INTERVAL ' . $i . ' DAY) ';
                }
                $sql .= ') a left join ';
                $sql .= '( select add_date,count(id) as total_count , count(CASE when mode=0 then 1 else null end) as reg_count, count(CASE when mode=1 then 1 else null end) as phone_count  from wifi_member ';
                $sql .= 'where  shop_id=' . $this->uid . ' and add_date between "' . $param['start_date'] . '" and "' . $param['end_date'] . '"  and ( mode=0 or mode=1 ) GROUP BY  add_date';
                $sql .= ') b on a.td=b.add_date ';
                break;
        }

        return $sql;
    }

    /**
     * 获取报表对应的SQL语句
     *
     * @param $param
     *
     * @return string
     */
    private function _getRptSql($param)
    {
        $where = ' where shop_id=' . $this->uid;
        switch (strtolower($param['mode'])) {
            case 'today' :
                $sql = ' select t, COALESCE(ct,0)  as ct from  wifi_hours a left JOIN ';
                $sql .= '(select thour ,count(*) as ct from ';
                $sql .= '(select shop_id,FROM_UNIXTIME(login_time,"%H") as thour, ';
                $sql .= 'FROM_UNIXTIME(login_time,"%Y-%m-%d") as d from wifi_auth_list ' . $where . ' ) a ';
                $sql .= 'where d="' . date('Y-m-d') . '" ';
                $sql .= 'group by thour ) ';
                $sql .= 'b on a.t=b.thour ';
                break;
            case 'yesterday' :
                $sql = ' select t, COALESCE(ct,0)  as ct from wifi_hours a left JOIN ';
                $sql .= '(select thour ,count(*) as ct from ';
                $sql .= '(select shop_id,FROM_UNIXTIME(login_time,"%H") as thour, ';
                $sql .= 'FROM_UNIXTIME(login_time,"%Y-%m-%d") as d from wifi_auth_list ' . $where . ') a ';
                $sql .= 'where d=DATE_ADD(CURDATE() ,INTERVAL -1 DAY) ';
                $sql .= 'group by thour ) ';
                $sql .= 'b on a.t=b.thour ';
                break;
            case 'week' :
                $sql = '  select right(td,5) as td,datediff(td,CURDATE()) as t,COALESCE(ct,0)  as ct from ';
                $sql .= ' ( select CURDATE() as td ';
                for ($i = 1; $i < 7; $i++) {
                    $sql .= '  UNION all select DATE_ADD(CURDATE() ,INTERVAL -' . $i . ' DAY) ';
                }
                $sql .= ' ORDER BY td ) a left join ';
                $sql .= '( select add_date,count(*) as ct  from wifi_auth_list ';
                $sql .= ' where shop_id=' . $this->uid . ' and add_date between DATE_ADD(CURDATE() ,INTERVAL -6 DAY) and CURDATE()  GROUP BY  add_date';
                $sql .= ') b on a.td=b.add_date ';
                break;
            case 'month' :
                $sql = 'select tname as t, COALESCE(ct,0) as ct from wifi_day  a left JOIN ';
                $sql .= '( select right(add_date,2) as td ,count(*) as ct  from wifi_auth_list  ';
                $sql .= 'where  shop_id=' . $this->uid . ' and  add_date >= "' . date('Y-m-01') . '" GROUP BY  add_date ';
                $sql .= ') b on a.tname=b.td ';
                $sql .= 'where a.id between 1 and ' . date('t');
                break;
            case 'query' :
                //                import("ORG.Util.Date");
                $dt      = new Date ($param['start_date']);
                $leftDay = $dt->dateDiff($param['end_date'], 'd');
                $sql     = ' select right(td,5) as td,COALESCE(ct,0)  as ct from ';
                $sql .= '( select "' . $param['start_date'] . '" as td ';
                for ($i = 0; $i <= $leftDay; $i++) {
                    $sql .= '  UNION all select DATE_ADD("' . $param['start_date'] . '" ,INTERVAL ' . $i . ' DAY) ';
                }
                $sql .= ') a left join ';
                $sql .= '(select add_date,count(*) as ct  from wifi_auth_list ';
                $sql .= 'where  shop_id=' . $this->uid . ' and add_date between "' . $param['start_date'] . '" and "' . $param['end_date'] . '"  GROUP BY  add_date ';
                $sql .= ') b on a.td=b.add_date';
                break;
        }

        return $sql;
    }

    /**
     * 上网统计
     */
    public function getrpt()
    {
        $param = $this->request->getGet();
        $where = ' where shop_id=' . $this->uid;
        switch (strtolower($param['mode'])) {
            case 'today' :
                $sql = 'select t, COALESCE(ct,0)  as ct from wifi_hours a left JOIN ';
                $sql .= '( select thour ,count(*) as ct from ';
                $sql .= '(select shop_id,FROM_UNIXTIME(login_time,"%H") as thour, ';
                $sql .= 'FROM_UNIXTIME(login_time,"%Y-%m-%d") as d from wifi_auth_list ' . $where . ' ) a ';
                $sql .= 'where d="' . date('Y-m-d') . '"';
                $sql .= " group by thour ) ";
                $sql .= " b on a.t=b.thour ";
                break;
            case 'yesterday' :
                $sql = 'select t, COALESCE(ct,0)  as ct from wifi_hours a left JOIN ';
                $sql .= '( select thour ,count(*) as ct from ';
                $sql .= '(select shop_id,FROM_UNIXTIME(login_time,"%H") as thour, ';
                $sql .= 'FROM_UNIXTIME(login_time,"%Y-%m-%d") as d from wifi_auth_list ' . $where . ' ) a ';
                $sql .= 'where d=DATE_ADD(CURDATE() ,INTERVAL -1 DAY) ';
                $sql .= 'group by thour ) ';
                $sql .= 'b on a.t=b.thour ';
                break;
            case 'week' :
                $sql = 'select right(td,5) as td,datediff(td,CURDATE()) as t,COALESCE(ct,0)  as ct from ';
                $sql .= '( select CURDATE() as td ';
                for ($i = 1; $i < 7; $i++) {
                    $sql .= '  UNION all select DATE_ADD(CURDATE() ,INTERVAL -' . $i . ' DAY) ';
                }
                $sql .= 'ORDER BY td ) a left join ';
                $sql .= '( select add_date,count(*) as ct  from wifi_auth_list ';
                $sql .= 'where shop_id=' . $this->uid . ' and add_date between DATE_ADD(CURDATE() ,INTERVAL -6 DAY) and CURDATE()  GROUP BY  add_date ';
                $sql .= ') b on a.td=b.add_date ';
                break;
            case 'month' :
                $sql = 'select tname as t, COALESCE(ct,0) as ct from wifi_day  a left JOIN ';
                $sql .= '( select right(add_date,2) as td ,count(*) as ct  from wifi_auth_list  ';
                $sql .= 'where  shop_id=' . $this->uid . ' and  add_date >= "' . date('Y-m-01') . '" GROUP BY  add_date ';
                $sql .= ') b on a.tname=b.td ';
                $sql .= 'where a.id between 1 and  ' . date('t');
                break;
            case 'query' :
                //                import("ORG.Util.Date");
                //$sdt=Date("Y-M-d",$sdate);
                //$edt=Date("Y-M-d",$edate);
                $dt      = new Date ($param['start_date']);
                $leftDay = $dt->dateDiff($param['end_date'], 'd');
                $sql     = 'select right(td,5) as td,datediff(td,CURDATE()) as t,COALESCE(ct,0)  as ct from ';
                $sql .= '( select "' . $param['start_date'] . '" as td ';
                for ($i = 0; $i <= $leftDay; $i++) {
                    $sql .= ' UNION all select DATE_ADD("' . $param['start_date'] . '" ,INTERVAL ' . $i . ' DAY) ';
                }
                $sql .= ') a left join ';
                $sql .= '(select add_date,count(*) as ct  from wifi_auth_list ';
                $sql .= 'where  shop_id=' . $this->uid . ' and add_date between "' . $param['start_date'] . '" and "' . $param['end_date'] . '"  GROUP BY  add_date ';
                $sql .= ') b on a.td=b.add_date ';
                break;
        }
        $data = DB::select($sql);
        call_back(0, $data);
    }

    /**
     * 显示广告统计界面
     */
    public function advRpt()
    {
        $this->assign('a', 'adv');
        $this->display();
    }

    /**
     * 获得广告统计数据
     */
    public function getAdRpt()
    {
        $param = $this->request->getGet();
        switch (strtolower($param['mode'])) {
            case 'today' :
                $sql = 'select t,CONCAT(CURDATE()," ",t,"点") as show_date, COALESCE(show_up,0)  as show_up, COALESCE(hit,0)  as hit,COALESCE(hit/show_up*100,0) as rt from wifi_hours a left JOIN ';
                $sql .= '(select thour, sum(show_up)as show_up,sum(hit) as hit from ';
                $sql .= '(select  FROM_UNIXTIME(add_time,"%H") as thour,show_up ,hit from wifi_ad_count ';
                $sql .= 'where add_date="' . date('Y-m-d') . '" and mode=1 and shop_id=' . $this->uid;
                $sql .= ')a group by thour ) c ';
                $sql .= 'on a.t=c.thour ';
                break;
            case 'yesterday' :
                $sql = 'select t,CONCAT(CURDATE()," ",t,"点") as show_date, COALESCE(show_up,0)  as show_up, COALESCE(hit,0)  as hit,COALESCE(hit/show_up*100,0) as rt from wifi_hours a left JOIN ';
                $sql .= '(select thour, sum(show_up)as show_up,sum(hit) as hit from ';
                $sql .= '(select  FROM_UNIXTIME(add_time,"%H") as thour,show_up ,hit from wifi_ad_count ';
                $sql .= 'where add_date=DATE_ADD(CURDATE() ,INTERVAL -1 DAY) and mode=1 and shop_id=' . $this->uid;
                $sql .= ')a group by thour ) c ';
                $sql .= ' on a.t=c.thour ';
                break;
            case 'week' :
                $sql = 'select td as show_date,right(td,5) as td,datediff(td,CURDATE()) as t, COALESCE(show_up,0)  as show_up, COALESCE(hit,0)  as hit ,COALESCE(hit/show_up*100,0) as rt from ';
                $sql .= '( select CURDATE() as td ';
                for ($i = 1; $i < 7; $i++) {
                    $sql .= ' UNION all select DATE_ADD(CURDATE() ,INTERVAL -' . $i . ' DAY) ';
                }
                $sql .= 'ORDER BY td ) a left join ';
                $sql .= '(select add_date,sum(show_up) as show_up ,sum(hit) as hit from wifi_ad_count ';
                $sql .= 'where shop_id=' . $this->uid . ' and mode=1 and add_date between DATE_ADD(CURDATE() ,INTERVAL -6 DAY) and CURDATE()  GROUP BY  add_date ';
                $sql .= ') b on a.td=b.add_date ';
                break;
            case 'month' :
                $sql = 'select tname as show_date,tname as t, COALESCE(show_up,0)  as show_up, COALESCE(hit,0)  as hit,COALESCE(hit/show_up*100,0) as rt from wifi_day  a left JOIN ';
                $sql .= '( select right(add_date,2) as td ,sum(show_up) as show_up ,sum(hit) as hit  from wifi_ad_count  ';
                $sql .= 'where  shop_id=' . $this->uid . ' and mode=1 and  add_date >= "' . date('Y-m-01') . '" GROUP BY  add_date ';
                $sql .= ') b on a.tname=b.td ';
                $sql .= 'where a.id between 1 and  ' . date('t');
                break;
            case 'query' :
                import("ORG.Util.Date");
                $dt      = new Date ($param['start_date']);
                $leftDay = $dt->dateDiff($param['end_date'], 'd');
                $sql     = 'select td as show_date,right(td,5) as td,datediff(td,CURDATE()) as t,COALESCE(show_up,0)  as show_up, COALESCE(hit,0)  as hit,COALESCE(hit/show_up*100,0) as rt from ';
                $sql .= '( select "' . $param['start_date'] . '" as td ';
                for ($i = 0; $i <= $leftDay; $i++) {
                    $sql .= ' UNION all select DATE_ADD("' . $param['start_date'] . '" ,INTERVAL ' . $i . ' DAY) ';
                }
                $sql .= ') a left join ';
                $sql .= '( select add_date,sum(show_up) as show_up ,sum(hit) as hit  from wifi_ad_count ';
                $sql .= 'where  shop_id=' . $this->uid . ' and mode=1 and add_date between "' . $param['start_date'] . '" and "' . $param['end_date'] . '"  GROUP BY  add_date ';
                $sql .= ') b on a.td=b.add_date ';
                break;
        }
        $data = DB::select($sql);
        call_back(0, $data);
    }

    /**
     * 留言管理
     */
    public function comment()
    {
        $build = CommentModel::select(['id', 'user', 'phone', 'content', 'add_time'])->whereShopId($this->uid);
        $num   = $build->count();
        // 评论数据
        $result = $build->orderBy('login_time desc')->skip(($this->page - 1) * $this->perPage)->take($this->perPage)->get()->toArray();
        // 获得分页配置
        $config = set_page_config($num, $this->url, 3, $this->perPage);
        // 实例化分页类
        $pagination = \Config\Services::pagination();
        // 初始化分页配置
        $pagination->initialize($config);
        $page = $pagination->create_links();
        $this->assign('page', $page);
        $this->assign('lists', $result);
        $this->display();
    }

    /**
     * 删除选中的留言
     *
     * @param $id
     */
    public function delComment($id)
    {
        $status = CommentModel::whereId($id)->whereShopId($this->uid)->update(['is_delete' => 1]);
        $status ? call_back(0) : call_back(2, '', '操作失败!');
        //        $this->success('操作完成', U('user / comment'));
    }

    /**
     * 微信动态认证
     */
    public function threeP()
    {
        $post = $this->request->getPost();
        if ($post) {
            if (!$post['t_wx_url']) {
                call_back(2, '', 'url不能为空!');
            }
            if (!$post['t_wx_token']) {
                call_back(2, '', 'token不能为空!');
            }
            $echoStr   = md5($post['t_wx_token'] . time());
            $nonce     = mt_rand(1, 1000);
            $timestamp = time();
            $tmpArr    = [$post['t_wx_token'], $timestamp, $nonce];
            sort($tmpArr, SORT_STRING);
            $tmpStr = implode($tmpArr);
            $urls   = explode('?', $post['t_wx_url']);
            $data   = 'timestamp=' . $timestamp . ' &signature=' . sha1($tmpStr) . ' &nonce=' . $nonce . ' &echoStr=' . $echoStr;
            if (isset($urls[1])) {
                $data = $data . ' & ' . $urls[1];
            }
            $url    = $urls[0] . ' ? ' . $data;
            $status = file_get_contents($url);
            if ($status != $echoStr) { //验证接口
                call_back(2, '', '验证失败!');
            }
            $status = ShopModel::whereId($this->uid)->update($post);
            $status ? call_back(0) : call_back(2, '', '操作失败!');
        } else {
            $info = ShopModel::select([
                't_wx_url',
                't_wx_token',
                'wx_id',
                'wx_token'
            ])->whereId($this->uid)->get()->toArray();
            $info = $info ? $info[0] : [];
            if (!$info || !$info ['wx_id']) {
                $info['wei_xin_url'] = '';
            } else {
                $info['wei_xin_url'] = 'http://' . $_SERVER ['SERVER_NAME'] . '/WeiXin/Command/' . $info['wx_id'];
            }
            $this->assign('info', $info);
            $this->display();
        }
    }

    /**
     * 微信接口
     */
    public function wxApi()
    {
        $post = $this->request->getPost();
        if ($post) {
            $info = ShopModel::select(['id', 'wx_id'])->whereWxId($post['wx_id'])->get()->toArray();
            if (!$info && $info['id'] != $this->uid) {
                call_back(2, '', '微信原始ID已存在!');
            }
            if ($post['wx_id']) {
                call_back(2, '', '微信原始ID不能为空!');
            }
            $post['wx_token']    = md5($this->uid . time());
            $post['update_time'] = time();
            $status              = ShopModel::whereId($this->uid)->update($post);
            $status ? call_back(0) : call_back(2, '', '操作失败!');

        } else {
            // 获得当前商户的微信url、微信钥密、微信id
            $info = ShopModel::select(['t_wx_url,t_wx_token,wx_id,wx_token'])->whereId($this->uid)->get()->toArray();
            $info = $info ? $info[0] : [];
            if (!$info || !$info['wx_id']) {
                $info ['wei_xin_url'] = '';
            } else {
                $info ['wei_xin_url'] = 'http://' . $_SERVER ['SERVER_NAME'] . '/WeiXin/Command/' . $info['wx_id'];
            }
            $this->assign('info', $info);
            $this->display();
        }
    }
}